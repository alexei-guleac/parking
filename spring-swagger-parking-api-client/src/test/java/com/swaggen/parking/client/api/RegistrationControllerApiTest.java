/*
 * Parking application Backend API
 * Parking IoT application project API reference for developers
 *
 * OpenAPI spec version: 0.2
 * Contact: parking_app_service@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swaggen.parking.client.api;

import com.swaggen.parking.client.model.RegistrationRequest;
import com.swaggen.parking.client.model.ResponseEntity;
import com.swaggen.parking.client.model.SocialRegisterRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RegistrationControllerApi
 */
@Ignore
public class RegistrationControllerApiTest {

    private final RegistrationControllerApi api = new RegistrationControllerApi();

    /**
     * User registration in system
     *
     * Handles user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registrationUsingPOSTTest() {
        RegistrationRequest body = null;
        Object headers = null;
        ResponseEntity response = api.registrationUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingDELETETest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingDELETE(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingGETTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingGET(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingHEADTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingHEAD(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingOPTIONSTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingOPTIONS(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingPATCHTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingPATCH(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingPOSTTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * User registration in system by social provider information
     *
     * Handles social user registration request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialRegistrationUsingPUTTest() {
        SocialRegisterRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialRegistrationUsingPUT(body, headers);

        // TODO: test validations
    }
}
