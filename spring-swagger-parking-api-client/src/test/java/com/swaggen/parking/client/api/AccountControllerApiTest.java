/*
 * Parking application Backend API
 * Parking IoT application project API reference for developers
 *
 * OpenAPI spec version: 0.2
 * Contact: parking_app_service@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swaggen.parking.client.api;

import com.swaggen.parking.client.model.ForgotPassRequest;
import com.swaggen.parking.client.model.ResetPasswordRequest;
import com.swaggen.parking.client.model.ResponseEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountControllerApi
 */
@Ignore
public class AccountControllerApiTest {

    private final AccountControllerApi api = new AccountControllerApi();

    /**
     * Confirm user account in the system.
     *
     * This REST web service method will set user account to ENABLED if passed valid confirmation token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmUserAccountUsingPOSTTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.confirmUserAccountUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * User forgot password handler
     *
     * Receives the user address and send an reset password email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forgotUserPasswordUsingPOSTTest() {
        ForgotPassRequest body = null;
        Object headers = null;
        ResponseEntity response = api.forgotUserPasswordUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingDELETETest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingDELETE(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingGETTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingGET(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingHEADTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingHEAD(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingOPTIONSTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingOPTIONS(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingPATCHTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingPATCH(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingPOSTTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * ${AccountController.getRecaptcha.value}
     *
     * ${AccountController.getRecaptcha.notes}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecaptchaUsingPUTTest() {
        String body = null;
        Object headers = null;
        ResponseEntity response = api.getRecaptchaUsingPUT(body, headers);

        // TODO: test validations
    }
    /**
     * Endpoint to reset a user&#x27;s password
     *
     * Reset user password based on received confirmation token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetUserPasswordUsingPOSTTest() {
        ResetPasswordRequest body = null;
        Object headers = null;
        ResponseEntity response = api.resetUserPasswordUsingPOST(body, headers);

        // TODO: test validations
    }
}
