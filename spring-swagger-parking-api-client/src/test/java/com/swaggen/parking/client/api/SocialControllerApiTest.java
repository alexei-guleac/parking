/*
 * Parking application Backend API
 * Parking IoT application project API reference for developers
 *
 * OpenAPI spec version: 0.2
 * Contact: parking_app_service@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swaggen.parking.client.api;

import com.swaggen.parking.client.model.ResponseEntity;
import com.swaggen.parking.client.model.SocialConnectRequest;
import com.swaggen.parking.client.model.SocialDisconnectRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SocialControllerApi
 */
@Ignore
public class SocialControllerApiTest {

    private final SocialControllerApi api = new SocialControllerApi();

    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingDELETETest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingDELETE(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingGETTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingGET(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingHEADTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingHEAD(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingOPTIONSTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingOPTIONS(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingPATCHTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingPATCH(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingPOSTTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingPOST(headers);

        // TODO: test validations
    }
    /**
     * Method complements OAuth 2.0 flow with Github
     *
     * GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void githubOAuthUsingPUTTest() {
        Object headers = null;
        ResponseEntity response = api.githubOAuthUsingPUT(headers);

        // TODO: test validations
    }
    /**
     * Connect social provider to user account
     *
     * Handles user social connection request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialConnectUsingPOSTTest() {
        SocialConnectRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialConnectUsingPOST(body, headers);

        // TODO: test validations
    }
    /**
     * Disconnect social provider from user account
     *
     * Handles user social disconnection request from client web application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialDisconnectUsingPOSTTest() {
        SocialDisconnectRequest body = null;
        Object headers = null;
        ResponseEntity response = api.socialDisconnectUsingPOST(body, headers);

        // TODO: test validations
    }
}
