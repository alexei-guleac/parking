/*
 * Parking application Backend API
 * Parking IoT application project API reference for developers
 *
 * OpenAPI spec version: 0.2
 * Contact: parking_app_service@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swaggen.parking.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

import javax.annotation.processing.Generated;


/**
 * LDAP user entry model. 
 */
@Schema(description = "LDAP user entry model. ")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-06T11:26:27.336+03:00[EET]")
public class UserLdap {
  /**
   * User account state (enabled, disabled, waiting confirmation)
   */
  public enum AccountStateEnum {
    WAITING_CONFIRMATION("WAITING_CONFIRMATION"),
    ENABLED("ENABLED"),
    DISABLED("DISABLED"),
    SOCIAL("SOCIAL");

    private String value;

    AccountStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AccountStateEnum fromValue(String text) {
      for (AccountStateEnum b : AccountStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("accountState")
  private AccountStateEnum accountState = null;

  @JsonProperty("cn")
  private String cn = null;

  @JsonProperty("creationDate")
  private OffsetDateTime creationDate = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("firstname")
  private String firstname = null;

  @JsonProperty("passwordUpdatedAt")
  private OffsetDateTime passwordUpdatedAt = null;

  @JsonProperty("sn")
  private String sn = null;

  @JsonProperty("socialIds")
  private Map<String, String> socialIds = null;

  @JsonProperty("uid")
  private String uid = null;

  @JsonProperty("updatedAt")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("userPassword")
  private String userPassword = null;

  public UserLdap accountState(AccountStateEnum accountState) {
    this.accountState = accountState;
    return this;
  }

   /**
   * User account state (enabled, disabled, waiting confirmation)
   * @return accountState
  **/
  @Schema(description = "User account state (enabled, disabled, waiting confirmation)")
  public AccountStateEnum getAccountState() {
    return accountState;
  }

  public void setAccountState(AccountStateEnum accountState) {
    this.accountState = accountState;
  }

  public UserLdap cn(String cn) {
    this.cn = cn;
    return this;
  }

   /**
   * User full name
   * @return cn
  **/
  @Schema(description = "User full name")
  public String getCn() {
    return cn;
  }

  public void setCn(String cn) {
    this.cn = cn;
  }

  public UserLdap creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * User account creation date
   * @return creationDate
  **/
  @Schema(description = "User account creation date")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public UserLdap email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User email
   * @return email
  **/
  @Schema(description = "User email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserLdap firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * Get firstname
   * @return firstname
  **/
  @Schema(description = "")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public UserLdap passwordUpdatedAt(OffsetDateTime passwordUpdatedAt) {
    this.passwordUpdatedAt = passwordUpdatedAt;
    return this;
  }

   /**
   * User password last updated at date
   * @return passwordUpdatedAt
  **/
  @Schema(description = "User password last updated at date")
  public OffsetDateTime getPasswordUpdatedAt() {
    return passwordUpdatedAt;
  }

  public void setPasswordUpdatedAt(OffsetDateTime passwordUpdatedAt) {
    this.passwordUpdatedAt = passwordUpdatedAt;
  }

  public UserLdap sn(String sn) {
    this.sn = sn;
    return this;
  }

   /**
   * User lastname
   * @return sn
  **/
  @Schema(description = "User lastname")
  public String getSn() {
    return sn;
  }

  public void setSn(String sn) {
    this.sn = sn;
  }

  public UserLdap socialIds(Map<String, String> socialIds) {
    this.socialIds = socialIds;
    return this;
  }

  public UserLdap putSocialIdsItem(String key, String socialIdsItem) {
    if (this.socialIds == null) {
      this.socialIds = new HashMap<String, String>();
    }
    this.socialIds.put(key, socialIdsItem);
    return this;
  }

   /**
   * Map of user social id&#x27;s by social service providers
   * @return socialIds
  **/
  @Schema(description = "Map of user social id's by social service providers")
  public Map<String, String> getSocialIds() {
    return socialIds;
  }

  public void setSocialIds(Map<String, String> socialIds) {
    this.socialIds = socialIds;
  }

  public UserLdap uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * User server uid
   * @return uid
  **/
  @Schema(description = "User server uid")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public UserLdap updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * User account last updated at date
   * @return updatedAt
  **/
  @Schema(description = "User account last updated at date")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public UserLdap userPassword(String userPassword) {
    this.userPassword = userPassword;
    return this;
  }

   /**
   * User password
   * @return userPassword
  **/
  @Schema(description = "User password")
  public String getUserPassword() {
    return userPassword;
  }

  public void setUserPassword(String userPassword) {
    this.userPassword = userPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserLdap userLdap = (UserLdap) o;
    return Objects.equals(this.accountState, userLdap.accountState) &&
        Objects.equals(this.cn, userLdap.cn) &&
        Objects.equals(this.creationDate, userLdap.creationDate) &&
        Objects.equals(this.email, userLdap.email) &&
        Objects.equals(this.firstname, userLdap.firstname) &&
        Objects.equals(this.passwordUpdatedAt, userLdap.passwordUpdatedAt) &&
        Objects.equals(this.sn, userLdap.sn) &&
        Objects.equals(this.socialIds, userLdap.socialIds) &&
        Objects.equals(this.uid, userLdap.uid) &&
        Objects.equals(this.updatedAt, userLdap.updatedAt) &&
        Objects.equals(this.userPassword, userLdap.userPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountState, cn, creationDate, email, firstname, passwordUpdatedAt, sn, socialIds, uid, updatedAt, userPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserLdap {\n");
    
    sb.append("    accountState: ").append(toIndentedString(accountState)).append("\n");
    sb.append("    cn: ").append(toIndentedString(cn)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    passwordUpdatedAt: ").append(toIndentedString(passwordUpdatedAt)).append("\n");
    sb.append("    sn: ").append(toIndentedString(sn)).append("\n");
    sb.append("    socialIds: ").append(toIndentedString(socialIds)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userPassword: ").append(toIndentedString(userPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
