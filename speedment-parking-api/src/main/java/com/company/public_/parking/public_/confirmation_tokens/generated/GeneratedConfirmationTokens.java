package com.company.public_.parking.public_.confirmation_tokens.generated;

import com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokens;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.OptionalBoolean;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokens}-interface
 * representing entities of the {@code confirmation_tokens}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedConfirmationTokens {
    
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getTokenId()} method.
     */
    LongField<ConfirmationTokens, Long> TOKEN_ID = DatastoreFields.createLongField(
        Identifier.TOKEN_ID,
        ConfirmationTokens::getTokenId,
        ConfirmationTokens::setTokenId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getClaimed()} method.
     */
    ComparableField<ConfirmationTokens, Boolean, Boolean> CLAIMED = DatastoreFields.createComparableField(
        Identifier.CLAIMED,
        o -> OptionalUtil.unwrap(o.getClaimed()),
        ConfirmationTokens::setClaimed,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getConfirmationToken()}
     * method.
     */
    StringField<ConfirmationTokens, String> CONFIRMATION_TOKEN = DatastoreFields.createStringField(
        Identifier.CONFIRMATION_TOKEN,
        o -> OptionalUtil.unwrap(o.getConfirmationToken()),
        ConfirmationTokens::setConfirmationToken,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getCreatedAt()} method.
     */
    ComparableField<ConfirmationTokens, Timestamp, Timestamp> CREATED_AT = DatastoreFields.createComparableField(
        Identifier.CREATED_AT,
        o -> OptionalUtil.unwrap(o.getCreatedAt()),
        ConfirmationTokens::setCreatedAt,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getExpirationDate()}
     * method.
     */
    ComparableField<ConfirmationTokens, Timestamp, Timestamp> EXPIRATION_DATE = DatastoreFields.createComparableField(
        Identifier.EXPIRATION_DATE,
        o -> OptionalUtil.unwrap(o.getExpirationDate()),
        ConfirmationTokens::setExpirationDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getOperationType()}
     * method.
     */
    ComparableField<ConfirmationTokens, Integer, Integer> OPERATION_TYPE = DatastoreFields.createComparableField(
        Identifier.OPERATION_TYPE,
        o -> OptionalUtil.unwrap(o.getOperationType()),
        ConfirmationTokens::setOperationType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link ConfirmationTokens} field that can
     * be obtained using the {@link ConfirmationTokens#getUid()} method.
     */
    StringField<ConfirmationTokens, String> UID = DatastoreFields.createStringField(
        Identifier.UID,
        ConfirmationTokens::getUid,
        ConfirmationTokens::setUid,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the tokenId of this ConfirmationTokens. The tokenId field
     * corresponds to the database column
     * parking.public.confirmation_tokens.token_id.
     * 
     * @return the tokenId of this ConfirmationTokens
     */
    long getTokenId();
    
    /**
     * Returns the claimed of this ConfirmationTokens. The claimed field
     * corresponds to the database column
     * parking.public.confirmation_tokens.claimed.
     * 
     * @return the claimed of this ConfirmationTokens
     */
    OptionalBoolean getClaimed();
    
    /**
     * Returns the confirmationToken of this ConfirmationTokens. The
     * confirmationToken field corresponds to the database column
     * parking.public.confirmation_tokens.confirmation_token.
     * 
     * @return the confirmationToken of this ConfirmationTokens
     */
    Optional<String> getConfirmationToken();
    
    /**
     * Returns the createdAt of this ConfirmationTokens. The createdAt field
     * corresponds to the database column
     * parking.public.confirmation_tokens.created_at.
     * 
     * @return the createdAt of this ConfirmationTokens
     */
    Optional<Timestamp> getCreatedAt();
    
    /**
     * Returns the expirationDate of this ConfirmationTokens. The expirationDate
     * field corresponds to the database column
     * parking.public.confirmation_tokens.expiration_date.
     * 
     * @return the expirationDate of this ConfirmationTokens
     */
    Optional<Timestamp> getExpirationDate();
    
    /**
     * Returns the operationType of this ConfirmationTokens. The operationType
     * field corresponds to the database column
     * parking.public.confirmation_tokens.operation_type.
     * 
     * @return the operationType of this ConfirmationTokens
     */
    OptionalInt getOperationType();
    
    /**
     * Returns the uid of this ConfirmationTokens. The uid field corresponds to
     * the database column parking.public.confirmation_tokens.uid.
     * 
     * @return the uid of this ConfirmationTokens
     */
    String getUid();
    
    /**
     * Sets the tokenId of this ConfirmationTokens. The tokenId field
     * corresponds to the database column
     * parking.public.confirmation_tokens.token_id.
     * 
     * @param tokenId to set of this ConfirmationTokens
     * @return        this ConfirmationTokens instance
     */
    ConfirmationTokens setTokenId(long tokenId);
    
    /**
     * Sets the claimed of this ConfirmationTokens. The claimed field
     * corresponds to the database column
     * parking.public.confirmation_tokens.claimed.
     * 
     * @param claimed to set of this ConfirmationTokens
     * @return        this ConfirmationTokens instance
     */
    ConfirmationTokens setClaimed(Boolean claimed);
    
    /**
     * Sets the confirmationToken of this ConfirmationTokens. The
     * confirmationToken field corresponds to the database column
     * parking.public.confirmation_tokens.confirmation_token.
     * 
     * @param confirmationToken to set of this ConfirmationTokens
     * @return                  this ConfirmationTokens instance
     */
    ConfirmationTokens setConfirmationToken(String confirmationToken);
    
    /**
     * Sets the createdAt of this ConfirmationTokens. The createdAt field
     * corresponds to the database column
     * parking.public.confirmation_tokens.created_at.
     * 
     * @param createdAt to set of this ConfirmationTokens
     * @return          this ConfirmationTokens instance
     */
    ConfirmationTokens setCreatedAt(Timestamp createdAt);
    
    /**
     * Sets the expirationDate of this ConfirmationTokens. The expirationDate
     * field corresponds to the database column
     * parking.public.confirmation_tokens.expiration_date.
     * 
     * @param expirationDate to set of this ConfirmationTokens
     * @return               this ConfirmationTokens instance
     */
    ConfirmationTokens setExpirationDate(Timestamp expirationDate);
    
    /**
     * Sets the operationType of this ConfirmationTokens. The operationType
     * field corresponds to the database column
     * parking.public.confirmation_tokens.operation_type.
     * 
     * @param operationType to set of this ConfirmationTokens
     * @return              this ConfirmationTokens instance
     */
    ConfirmationTokens setOperationType(Integer operationType);
    
    /**
     * Sets the uid of this ConfirmationTokens. The uid field corresponds to the
     * database column parking.public.confirmation_tokens.uid.
     * 
     * @param uid to set of this ConfirmationTokens
     * @return    this ConfirmationTokens instance
     */
    ConfirmationTokens setUid(String uid);
    
    enum Identifier implements ColumnIdentifier<ConfirmationTokens> {
        
        TOKEN_ID           ("token_id"),
        CLAIMED            ("claimed"),
        CONFIRMATION_TOKEN ("confirmation_token"),
        CREATED_AT         ("created_at"),
        EXPIRATION_DATE    ("expiration_date"),
        OPERATION_TYPE     ("operation_type"),
        UID                ("uid");
        
        private final String columnId;
        private final TableIdentifier<ConfirmationTokens> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "parking";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "confirmation_tokens";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<ConfirmationTokens> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}