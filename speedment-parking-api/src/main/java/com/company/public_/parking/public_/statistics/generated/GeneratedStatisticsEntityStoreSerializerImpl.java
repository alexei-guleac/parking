package com.company.public_.parking.public_.statistics.generated;

import com.company.public_.parking.public_.statistics.Statistics;
import com.company.public_.parking.public_.statistics.StatisticsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of Statistics.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStatisticsEntityStoreSerializerImpl implements EntityStoreSerializer<Statistics> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int FIELD_ID = 0;
    private static final int ENDPOS_LOT_NUMBER = 8;
    private static final int ENDPOS_PARKING_LOT_STATUS = 9;
    private static final int ENDPOS_UPDATED_AT = 10;
    private static final int VARSIZE_BEGINS = 11;
    
    protected GeneratedStatisticsEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Statistics> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.putLong(FIELD_ID, entity.getId());
            if (entity.getLotNumber().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getLotNumber().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_LOT_NUMBER, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_LOT_NUMBER, (byte) (0x80 | varSizePos));
            }
            if (entity.getParkingLotStatus().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getParkingLotStatus().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_PARKING_LOT_STATUS, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_PARKING_LOT_STATUS, (byte) (0x80 | varSizePos));
            }
            if (entity.getUpdatedAt().isPresent()) {
                buffer.putLong(VARSIZE_BEGINS + varSizePos, entity.getUpdatedAt().get().getTime());
                varSizePos += Long.BYTES;
                buffer.put(ENDPOS_UPDATED_AT, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_UPDATED_AT, (byte) (0x80 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<Statistics> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Statistics entity = new StatisticsImpl();
            entity.setId(buffer.getLong(offset + FIELD_ID));
            if (buffer.get(offset + ENDPOS_LOT_NUMBER) >= 0) {
                entity.setLotNumber(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LOT_NUMBER) - Integer.BYTES));
            }
            if (buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) >= 0) {
                entity.setParkingLotStatus(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES));
            }
            if (buffer.get(offset + ENDPOS_UPDATED_AT) >= 0) {
                entity.setUpdatedAt(new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_UPDATED_AT) - Long.BYTES)));
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return long.class;
                case LOT_NUMBER         : 
                case PARKING_LOT_STATUS : return int.class;
                case UPDATED_AT         : return Timestamp.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return long.class;
                case "lot_number"         : 
                case "parking_lot_status" : return int.class;
                case "updated_at"         : return Timestamp.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Statistics> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Statistics>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("Statistics has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("Statistics has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return ALWAYS_FALSE;
                case LOT_NUMBER         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LOT_NUMBER) < 0;
                case PARKING_LOT_STATUS : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PARKING_LOT_STATUS) < 0;
                case UPDATED_AT         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_UPDATED_AT) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return ALWAYS_FALSE;
                case "lot_number"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LOT_NUMBER) < 0;
                case "parking_lot_status" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PARKING_LOT_STATUS) < 0;
                case "updated_at"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_UPDATED_AT) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return ALWAYS_TRUE;
                case LOT_NUMBER         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LOT_NUMBER) >= 0;
                case PARKING_LOT_STATUS : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PARKING_LOT_STATUS) >= 0;
                case UPDATED_AT         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_UPDATED_AT) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return ALWAYS_TRUE;
                case "lot_number"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_LOT_NUMBER) >= 0;
                case "parking_lot_status" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PARKING_LOT_STATUS) >= 0;
                case "updated_at"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_UPDATED_AT) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case LOT_NUMBER         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LOT_NUMBER) - Integer.BYTES);
                };
                case PARKING_LOT_STATUS : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "lot_number"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_LOT_NUMBER) - Integer.BYTES);
                };
                case "parking_lot_status" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Statistics> colId) {
        if ("id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Statistics> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Statistics> colId) {
        if ("updated_at".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_UPDATED_AT) - Long.BYTES));
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case LOT_NUMBER         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_LOT_NUMBER) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_LOT_NUMBER) - Integer.BYTES)
                    );
                };
                case PARKING_LOT_STATUS : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES)
                    );
                };
                case UPDATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_UPDATED_AT) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_UPDATED_AT) - Long.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "lot_number"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_LOT_NUMBER) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_LOT_NUMBER) - Integer.BYTES)
                    );
                };
                case "parking_lot_status" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_PARKING_LOT_STATUS) - Integer.BYTES)
                    );
                };
                case "updated_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_UPDATED_AT) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_UPDATED_AT) - Long.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case LOT_NUMBER         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_LOT_NUMBER);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_LOT_NUMBER);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case PARKING_LOT_STATUS : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_PARKING_LOT_STATUS);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_PARKING_LOT_STATUS);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case UPDATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_UPDATED_AT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_UPDATED_AT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "lot_number"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_LOT_NUMBER);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_LOT_NUMBER);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case "parking_lot_status" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_PARKING_LOT_STATUS);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_PARKING_LOT_STATUS);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case "updated_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_UPDATED_AT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_UPDATED_AT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Statistics> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Statistics> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Statistics> colId, final int value) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case LOT_NUMBER         : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_LOT_NUMBER);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                case PARKING_LOT_STATUS : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_PARKING_LOT_STATUS);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "lot_number"         : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_LOT_NUMBER);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                case "parking_lot_status" : {
                    final int operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_PARKING_LOT_STATUS);
                        if (endPos < 0) return 1;
                        else return Integer.compare(
                            buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Statistics> colId, final long value) {
        if ("id".equals(colId.getColumnId())) {
            {
                final long operand = value;
                return ref -> Long.compare(
                    bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Statistics> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Statistics> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Statistics> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Statistics> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Statistics> colId, final Object value) {
        if ("updated_at".equals(colId.getColumnId())) {
            {
                final long operand = ((Timestamp) value).getTime();
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_UPDATED_AT);
                    if (endPos < 0) return 1;
                    else return Long.compare(
                        buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Statistics> colId) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return ALWAYS_LESS;
                case LOT_NUMBER         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_LOT_NUMBER) < 0 ? 0 : -1;
                };
                case PARKING_LOT_STATUS : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) < 0 ? 0 : -1;
                };
                case UPDATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_UPDATED_AT) < 0 ? 0 : -1;
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return ALWAYS_LESS;
                case "lot_number"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_LOT_NUMBER) < 0 ? 0 : -1;
                };
                case "parking_lot_status" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_PARKING_LOT_STATUS) < 0 ? 0 : -1;
                };
                case "updated_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_UPDATED_AT) < 0 ? 0 : -1;
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Statistics> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case LOT_NUMBER         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case PARKING_LOT_STATUS : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case UPDATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case "lot_number"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case "parking_lot_status" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case "updated_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Statistics> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case LOT_NUMBER         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case PARKING_LOT_STATUS : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case UPDATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case "lot_number"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case "parking_lot_status" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case "updated_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Statistics> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Statistics.Identifier) {
            final Statistics.Identifier _id = (Statistics.Identifier) colId;
            switch (_id) {
                case ID                 : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case LOT_NUMBER         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_LOT_NUMBER), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case PARKING_LOT_STATUS : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_PARKING_LOT_STATUS), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case UPDATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_UPDATED_AT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"                 : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case "lot_number"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_LOT_NUMBER), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_LOT_NUMBER)
                    );
                };
                case "parking_lot_status" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_PARKING_LOT_STATUS), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_PARKING_LOT_STATUS - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_PARKING_LOT_STATUS)
                    );
                };
                case "updated_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_UPDATED_AT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_UPDATED_AT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_UPDATED_AT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_UPDATED_AT));
    }
}