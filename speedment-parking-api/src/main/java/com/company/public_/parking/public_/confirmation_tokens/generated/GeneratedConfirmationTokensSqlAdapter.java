package com.company.public_.parking.public_.confirmation_tokens.generated;

import com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokens;
import com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokensImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokens}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedConfirmationTokensSqlAdapter implements SqlAdapter<ConfirmationTokens> {
    
    private final TableIdentifier<ConfirmationTokens> tableIdentifier;
    
    protected GeneratedConfirmationTokensSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("parking", "public", "confirmation_tokens");
    }
    
    protected ConfirmationTokens apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setTokenId(           getLong(resultSet, 1 + offset))
            .setClaimed(           getBoolean(resultSet, 2 + offset))
            .setConfirmationToken( resultSet.getString(3 + offset))
            .setCreatedAt(         resultSet.getTimestamp(4 + offset))
            .setExpirationDate(    resultSet.getTimestamp(5 + offset))
            .setOperationType(     getInt(resultSet, 6 + offset))
            .setUid(               resultSet.getString(7 + offset))
            ;
    }
    
    protected ConfirmationTokensImpl createEntity() {
        return new ConfirmationTokensImpl();
    }
    
    @Override
    public TableIdentifier<ConfirmationTokens> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, ConfirmationTokens> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, ConfirmationTokens> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}