package com.company.public_.parking.public_.parking_lots.generated;

import com.company.public_.parking.public_.parking_lots.ParkingLots;
import com.company.public_.parking.public_.parking_lots.ParkingLotsManager;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.sql.Timestamp;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for ParkingLots entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/public")
public abstract class GeneratedParkingLotsController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired ParkingLotsManager manager;
    protected JsonEncoder<ParkingLots> encoder;
    
    @PostConstruct
    void createParkingLotsEncoder() {
        encoder = jsonComponent.<ParkingLots>emptyEncoder()
            .put("id", ParkingLots.ID)
            .put("lotNumber", ParkingLots.LOT_NUMBER)
            .put("status", ParkingLots.STATUS)
            .put("updatedAt", ParkingLots.UPDATED_AT)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/parking_lots", produces = "application/json")
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, ParkingLotsFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, ParkingLotsSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<ParkingLots>> predicates,
            List<Comparator<ParkingLots>> sorters,
            long start,
            long limit) {
        
        Stream<ParkingLots> stream      = manager.stream();
        Stream<ParkingLots> totalStream = manager.stream();
        
        for (final Predicate<ParkingLots> predicate : predicates) {
            stream      = stream.filter(predicate);
            totalStream = totalStream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<ParkingLots>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        final String total = String.valueOf(totalStream.count());
        return stream
            .skip(start)
            .limit(limit)
            .collect(jsonComponent.collector(ParkingLots.class)
                .put("total", () -> total)
                .put("data", JsonCollectors.toList(encoder))
                .build()
            );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/parking_lots/{id}", produces = "application/json")
    public String get(
            @PathVariable(name = "id") long id) {
        return encoder.apply(
            manager.stream()
                .filter(ParkingLots.ID.equal(id))
                .findFirst()
                .orElseThrow(() -> new ParkingLotsNotFoundException(id))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/parking_lots", consumes = "application/json")
    public void create(
            @RequestBody @Validated ParkingLotsCreateBody createBody) {
        final Persister<ParkingLots> persister = manager.persister();
        final ParkingLots parkingLots = manager.create()
            .setId(createBody.getId())
            .setLotNumber(createBody.getLotNumber())
            .setStatus(createBody.getStatus())
            .setUpdatedAt(createBody.getUpdatedAt())
        ;
        
        persister.accept(parkingLots);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/parking_lots/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") long id,
            @RequestBody @Validated ParkingLotsUpdateBody updateBody) {
        final FieldSet<ParkingLots> excluded = FieldSet.allExcept(
            ParkingLots.ID
        );
        
        final Updater<ParkingLots> updater = manager.updater(excluded);
        final ParkingLots parkingLots = manager.stream()
            .filter(ParkingLots.ID.equal(id))
            .findFirst()
            .orElseThrow(() -> new ParkingLotsNotFoundException(id));
        
        parkingLots.setLotNumber(updateBody.getLotNumber());
        parkingLots.setStatus(updateBody.getStatus());
        parkingLots.setUpdatedAt(updateBody.getUpdatedAt());
        
        updater.accept(parkingLots);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/parking_lots/{id}")
    public void delete(
            @PathVariable(name = "id") long id) {
        manager.stream()
            .filter(ParkingLots.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class ParkingLotsFilter extends AbstractFilter<ParkingLots> {
        
        public ParkingLotsFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<ParkingLots> toPredicate() {
            switch (property()) {
                case "id" : {
                    final long v = Long.parseLong(value());
                    switch (operator()) {
                        case "eq"   : return ParkingLots.ID.equal(v);
                        case "ne"   : return ParkingLots.ID.notEqual(v);
                        case "lt"   : return ParkingLots.ID.lessThan(v);
                        case "le"   : return ParkingLots.ID.lessOrEqual(v);
                        case "gt"   : return ParkingLots.ID.greaterThan(v);
                        case "ge"   : return ParkingLots.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "ParkingLots.id."
                        );
                    }
                }
                case "lotNumber" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return ParkingLots.LOT_NUMBER.equal(v);
                        case "ne"   : return ParkingLots.LOT_NUMBER.notEqual(v);
                        case "lt"   : return ParkingLots.LOT_NUMBER.lessThan(v);
                        case "le"   : return ParkingLots.LOT_NUMBER.lessOrEqual(v);
                        case "gt"   : return ParkingLots.LOT_NUMBER.greaterThan(v);
                        case "ge"   : return ParkingLots.LOT_NUMBER.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "ParkingLots.lotNumber."
                        );
                    }
                }
                case "status" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return ParkingLots.STATUS.equal(v);
                        case "ne"   : return ParkingLots.STATUS.notEqual(v);
                        case "lt"   : return ParkingLots.STATUS.lessThan(v);
                        case "le"   : return ParkingLots.STATUS.lessOrEqual(v);
                        case "gt"   : return ParkingLots.STATUS.greaterThan(v);
                        case "ge"   : return ParkingLots.STATUS.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "ParkingLots.status."
                        );
                    }
                }
                case "updatedAt" : {
                    final Timestamp v = Timestamp.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return ParkingLots.UPDATED_AT.equal(v);
                        case "ne"   : return ParkingLots.UPDATED_AT.notEqual(v);
                        case "lt"   : return ParkingLots.UPDATED_AT.lessThan(v);
                        case "le"   : return ParkingLots.UPDATED_AT.lessOrEqual(v);
                        case "gt"   : return ParkingLots.UPDATED_AT.greaterThan(v);
                        case "ge"   : return ParkingLots.UPDATED_AT.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "ParkingLots.updatedAt."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid ParkingLots property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class ParkingLotsSort extends AbstractSort<ParkingLots> {
        
        public ParkingLotsSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<ParkingLots> toComparator() {
            final Comparator<ParkingLots> comparator;
            switch (property()) {
                case "id"        : comparator = ParkingLots.ID.comparator();         break;
                case "lotNumber" : comparator = ParkingLots.LOT_NUMBER.comparator(); break;
                case "status"    : comparator = ParkingLots.STATUS.comparator();     break;
                case "updatedAt" : comparator = ParkingLots.UPDATED_AT.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid ParkingLots property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class ParkingLotsNotFoundException extends RuntimeException {
        
        public ParkingLotsNotFoundException(long id) {
            super("ParkingLots with id '" + id + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ParkingLotsCreateBody {
        
        private final long id;
        private final Integer lotNumber;
        private final Integer status;
        private final Timestamp updatedAt;
        
        @JsonCreator
        public ParkingLotsCreateBody(
                @JsonProperty("id") Long id,
                @JsonProperty("lotNumber") Integer lotNumber,
                @JsonProperty("status") Integer status,
                @JsonProperty("updatedAt") Timestamp updatedAt) {
            this.id = Objects.requireNonNull(id, "`id` is required");
            this.lotNumber = Objects.requireNonNull(lotNumber, "`lotNumber` is required");
            this.status = Objects.requireNonNull(status, "`status` is required");
            this.updatedAt = Objects.requireNonNull(updatedAt, "`updatedAt` is required");
        }
        
        public long getId() {
            return this.id;
        }
        
        public Integer getLotNumber() {
            return this.lotNumber;
        }
        
        public Integer getStatus() {
            return this.status;
        }
        
        public Timestamp getUpdatedAt() {
            return this.updatedAt;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ParkingLotsUpdateBody {
        
        private final Integer lotNumber;
        private final Integer status;
        private final Timestamp updatedAt;
        
        @JsonCreator
        public ParkingLotsUpdateBody(
                @JsonProperty("lotNumber") Integer lotNumber,
                @JsonProperty("status") Integer status,
                @JsonProperty("updatedAt") Timestamp updatedAt) {
            this.lotNumber = Objects.requireNonNull(lotNumber, "`lotNumber` is required");
            this.status = Objects.requireNonNull(status, "`status` is required");
            this.updatedAt = Objects.requireNonNull(updatedAt, "`updatedAt` is required");
        }
        
        public Integer getLotNumber() {
            return this.lotNumber;
        }
        
        public Integer getStatus() {
            return this.status;
        }
        
        public Timestamp getUpdatedAt() {
            return this.updatedAt;
        }
    }
}