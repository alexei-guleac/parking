package com.company.public_.parking.public_.parking_lots.generated;

import com.company.public_.parking.public_.parking_lots.ParkingLots;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.public_.parking.public_.parking_lots.ParkingLots}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedParkingLotsImpl implements ParkingLots {
    
    private long id;
    private Integer lotNumber;
    private Integer status;
    private Timestamp updatedAt;
    
    protected GeneratedParkingLotsImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public OptionalInt getLotNumber() {
        return OptionalUtil.ofNullable(lotNumber);
    }
    
    @Override
    public OptionalInt getStatus() {
        return OptionalUtil.ofNullable(status);
    }
    
    @Override
    public Optional<Timestamp> getUpdatedAt() {
        return Optional.ofNullable(updatedAt);
    }
    
    @Override
    public ParkingLots setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public ParkingLots setLotNumber(Integer lotNumber) {
        this.lotNumber = lotNumber;
        return this;
    }
    
    @Override
    public ParkingLots setStatus(Integer status) {
        this.status = status;
        return this;
    }
    
    @Override
    public ParkingLots setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("lotNumber = " + Objects.toString(OptionalUtil.unwrap(getLotNumber())));
        sj.add("status = "    + Objects.toString(OptionalUtil.unwrap(getStatus())));
        sj.add("updatedAt = " + Objects.toString(OptionalUtil.unwrap(getUpdatedAt())));
        return "ParkingLotsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof ParkingLots)) { return false; }
        final ParkingLots thatParkingLots = (ParkingLots)that;
        if (this.getId() != thatParkingLots.getId()) { return false; }
        if (!Objects.equals(this.getLotNumber(), thatParkingLots.getLotNumber())) { return false; }
        if (!Objects.equals(this.getStatus(), thatParkingLots.getStatus())) { return false; }
        if (!Objects.equals(this.getUpdatedAt(), thatParkingLots.getUpdatedAt())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLotNumber()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStatus()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUpdatedAt()));
        return hash;
    }
}