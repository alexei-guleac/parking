package com.company.public_.parking.public_.statistics.generated;

import com.company.public_.parking.public_.statistics.Statistics;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.public_.parking.public_.statistics.Statistics}-interface
 * representing entities of the {@code statistics}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStatistics {
    
    /**
     * This Field corresponds to the {@link Statistics} field that can be
     * obtained using the {@link Statistics#getId()} method.
     */
    LongField<Statistics, Long> ID = DatastoreFields.createLongField(
        Identifier.ID,
        Statistics::getId,
        Statistics::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Statistics} field that can be
     * obtained using the {@link Statistics#getLotNumber()} method.
     */
    ComparableField<Statistics, Integer, Integer> LOT_NUMBER = DatastoreFields.createComparableField(
        Identifier.LOT_NUMBER,
        o -> OptionalUtil.unwrap(o.getLotNumber()),
        Statistics::setLotNumber,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Statistics} field that can be
     * obtained using the {@link Statistics#getParkingLotStatus()} method.
     */
    ComparableField<Statistics, Integer, Integer> PARKING_LOT_STATUS = DatastoreFields.createComparableField(
        Identifier.PARKING_LOT_STATUS,
        o -> OptionalUtil.unwrap(o.getParkingLotStatus()),
        Statistics::setParkingLotStatus,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Statistics} field that can be
     * obtained using the {@link Statistics#getUpdatedAt()} method.
     */
    ComparableField<Statistics, Timestamp, Timestamp> UPDATED_AT = DatastoreFields.createComparableField(
        Identifier.UPDATED_AT,
        o -> OptionalUtil.unwrap(o.getUpdatedAt()),
        Statistics::setUpdatedAt,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Statistics. The id field corresponds to the
     * database column parking.public.statistics.id.
     * 
     * @return the id of this Statistics
     */
    long getId();
    
    /**
     * Returns the lotNumber of this Statistics. The lotNumber field corresponds
     * to the database column parking.public.statistics.lot_number.
     * 
     * @return the lotNumber of this Statistics
     */
    OptionalInt getLotNumber();
    
    /**
     * Returns the parkingLotStatus of this Statistics. The parkingLotStatus
     * field corresponds to the database column
     * parking.public.statistics.parking_lot_status.
     * 
     * @return the parkingLotStatus of this Statistics
     */
    OptionalInt getParkingLotStatus();
    
    /**
     * Returns the updatedAt of this Statistics. The updatedAt field corresponds
     * to the database column parking.public.statistics.updated_at.
     * 
     * @return the updatedAt of this Statistics
     */
    Optional<Timestamp> getUpdatedAt();
    
    /**
     * Sets the id of this Statistics. The id field corresponds to the database
     * column parking.public.statistics.id.
     * 
     * @param id to set of this Statistics
     * @return   this Statistics instance
     */
    Statistics setId(long id);
    
    /**
     * Sets the lotNumber of this Statistics. The lotNumber field corresponds to
     * the database column parking.public.statistics.lot_number.
     * 
     * @param lotNumber to set of this Statistics
     * @return          this Statistics instance
     */
    Statistics setLotNumber(Integer lotNumber);
    
    /**
     * Sets the parkingLotStatus of this Statistics. The parkingLotStatus field
     * corresponds to the database column
     * parking.public.statistics.parking_lot_status.
     * 
     * @param parkingLotStatus to set of this Statistics
     * @return                 this Statistics instance
     */
    Statistics setParkingLotStatus(Integer parkingLotStatus);
    
    /**
     * Sets the updatedAt of this Statistics. The updatedAt field corresponds to
     * the database column parking.public.statistics.updated_at.
     * 
     * @param updatedAt to set of this Statistics
     * @return          this Statistics instance
     */
    Statistics setUpdatedAt(Timestamp updatedAt);
    
    enum Identifier implements ColumnIdentifier<Statistics> {
        
        ID                 ("id"),
        LOT_NUMBER         ("lot_number"),
        PARKING_LOT_STATUS ("parking_lot_status"),
        UPDATED_AT         ("updated_at");
        
        private final String columnId;
        private final TableIdentifier<Statistics> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "parking";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "statistics";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Statistics> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}