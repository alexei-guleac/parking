package com.company.public_.parking.public_.confirmation_tokens.generated;

import com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokens;
import com.company.public_.parking.public_.confirmation_tokens.ConfirmationTokensImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of ConfirmationTokens.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedConfirmationTokensEntityStoreSerializerImpl implements EntityStoreSerializer<ConfirmationTokens> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int BITMAP_BEGINS = 0;
    private static final int BITMAP_CLAIMED = 0;
    private static final int FIELD_TOKEN_ID = 1;
    private static final int ENDPOS_OPERATION_TYPE = 9;
    private static final int ENDPOS_CREATED_AT = 10;
    private static final int ENDPOS_EXPIRATION_DATE = 11;
    private static final int ENDPOS_CONFIRMATION_TOKEN = 12;
    private static final int ENDPOS_UID = 16;
    private static final int VARSIZE_BEGINS = 20;
    
    protected GeneratedConfirmationTokensEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, ConfirmationTokens> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.put(BITMAP_BEGINS, (byte) 0);
            byte bitmap0 = (byte) 0;
            
            if (!entity.getClaimed().isPresent()) {
                bitmap0 |= 0b10;
            } else if (entity.getClaimed().getAsBoolean()) {
                bitmap0 |= 0b1;
            }
            buffer.putLong(FIELD_TOKEN_ID, entity.getTokenId());
            if (entity.getOperationType().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getOperationType().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_OPERATION_TYPE, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_OPERATION_TYPE, (byte) (0x80 | varSizePos));
            }
            if (entity.getCreatedAt().isPresent()) {
                buffer.putLong(VARSIZE_BEGINS + varSizePos, entity.getCreatedAt().get().getTime());
                varSizePos += Long.BYTES;
                buffer.put(ENDPOS_CREATED_AT, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_CREATED_AT, (byte) (0x80 | varSizePos));
            }
            if (entity.getExpirationDate().isPresent()) {
                buffer.putLong(VARSIZE_BEGINS + varSizePos, entity.getExpirationDate().get().getTime());
                varSizePos += Long.BYTES;
                buffer.put(ENDPOS_EXPIRATION_DATE, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_EXPIRATION_DATE, (byte) (0x80 | varSizePos));
            }
            if (entity.getConfirmationToken().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getConfirmationToken().get().getBytes());
                buffer.putInt(ENDPOS_CONFIRMATION_TOKEN, varSizePos);
            } else {
                buffer.putInt(ENDPOS_CONFIRMATION_TOKEN, (0x80000000 | varSizePos));
            }
            varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getUid().getBytes());
            buffer.putInt(ENDPOS_UID, varSizePos);
            buffer.put(BITMAP_BEGINS, bitmap0);
            
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<ConfirmationTokens> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final ConfirmationTokens entity = new ConfirmationTokensImpl();
            entity.setTokenId(buffer.getLong(offset + FIELD_TOKEN_ID));
            if ((buffer.get(offset + BITMAP_CLAIMED) & 0b10) == 0) {
                entity.setClaimed((buffer.get(offset + BITMAP_CLAIMED) & 0b1) != 0);
            }
            if (buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN) >= 0) {
                try {
                    entity.setConfirmationToken(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.get(offset + ENDPOS_CREATED_AT) >= 0) {
                entity.setCreatedAt(new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATED_AT) - Long.BYTES)));
            }
            if (buffer.get(offset + ENDPOS_EXPIRATION_DATE) >= 0) {
                entity.setExpirationDate(new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_EXPIRATION_DATE) - Long.BYTES)));
            }
            if (buffer.get(offset + ENDPOS_OPERATION_TYPE) >= 0) {
                entity.setOperationType(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_OPERATION_TYPE) - Integer.BYTES));
            }
            try {
                entity.setUid(Utf8Util.deserialize(buffer,
                    offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_UID - Integer.BYTES)),
                    offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_UID)
                ));
            } catch (final Utf8Exception ex) {
                final LongToIntFunction sizeOf = sizeOf();
                throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return boolean.class;
                case TOKEN_ID           : return long.class;
                case OPERATION_TYPE     : return int.class;
                case CREATED_AT         : 
                case EXPIRATION_DATE    : return Timestamp.class;
                case CONFIRMATION_TOKEN : 
                case UID                : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return boolean.class;
                case "token_id"           : return long.class;
                case "operation_type"     : return int.class;
                case "created_at"         : 
                case "expiration_date"    : return Timestamp.class;
                case "confirmation_token" : 
                case "uid"                : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<ConfirmationTokens> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<ConfirmationTokens>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("ConfirmationTokens has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("ConfirmationTokens has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) != 0;
                case TOKEN_ID           : return ALWAYS_FALSE;
                case OPERATION_TYPE     : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_OPERATION_TYPE) < 0;
                case CREATED_AT         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATED_AT) < 0;
                case EXPIRATION_DATE    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_EXPIRATION_DATE) < 0;
                case CONFIRMATION_TOKEN : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) < 0;
                case UID                : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) != 0;
                case "token_id"           : return ALWAYS_FALSE;
                case "operation_type"     : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_OPERATION_TYPE) < 0;
                case "created_at"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATED_AT) < 0;
                case "expiration_date"    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_EXPIRATION_DATE) < 0;
                case "confirmation_token" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) < 0;
                case "uid"                : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) == 0;
                case TOKEN_ID           : return ALWAYS_TRUE;
                case OPERATION_TYPE     : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_OPERATION_TYPE) >= 0;
                case CREATED_AT         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATED_AT) >= 0;
                case EXPIRATION_DATE    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_EXPIRATION_DATE) >= 0;
                case CONFIRMATION_TOKEN : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) >= 0;
                case UID                : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) == 0;
                case "token_id"           : return ALWAYS_TRUE;
                case "operation_type"     : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_OPERATION_TYPE) >= 0;
                case "created_at"         : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATED_AT) >= 0;
                case "expiration_date"    : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_EXPIRATION_DATE) >= 0;
                case "confirmation_token" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) >= 0;
                case "uid"                : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        if ("operation_type".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_OPERATION_TYPE) - Integer.BYTES);
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        if ("token_id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_TOKEN_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        if ("claimed".equals(colId.getColumnId())) {
            return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b1) != 0;
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CREATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATED_AT) - Long.BYTES));
                };
                case EXPIRATION_DATE    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_EXPIRATION_DATE) - Long.BYTES));
                };
                case CONFIRMATION_TOKEN : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case UID                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_UID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_UID)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "created_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATED_AT) - Long.BYTES));
                };
                case "expiration_date"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_EXPIRATION_DATE) - Long.BYTES));
                };
                case "confirmation_token" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "uid"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_UID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_UID)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CLAIMED) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CLAIMED) & 0b1
                );
                case TOKEN_ID           : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_TOKEN_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_TOKEN_ID)
                );
                case OPERATION_TYPE     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_OPERATION_TYPE) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_OPERATION_TYPE) - Integer.BYTES)
                    );
                };
                case CREATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_CREATED_AT) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_CREATED_AT) - Long.BYTES)
                    );
                };
                case EXPIRATION_DATE    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_EXPIRATION_DATE) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_EXPIRATION_DATE) - Long.BYTES)
                    );
                };
                case CONFIRMATION_TOKEN : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CONFIRMATION_TOKEN);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CONFIRMATION_TOKEN);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case UID                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_UID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_UID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_UID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_UID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CLAIMED) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CLAIMED) & 0b1
                );
                case "token_id"           : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_TOKEN_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_TOKEN_ID)
                );
                case "operation_type"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_OPERATION_TYPE) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_OPERATION_TYPE) - Integer.BYTES)
                    );
                };
                case "created_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_CREATED_AT) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_CREATED_AT) - Long.BYTES)
                    );
                };
                case "expiration_date"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_EXPIRATION_DATE) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_EXPIRATION_DATE) - Long.BYTES)
                    );
                };
                case "confirmation_token" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CONFIRMATION_TOKEN);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CONFIRMATION_TOKEN);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "uid"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_UID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_UID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_UID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_UID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CLAIMED) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CLAIMED) & 0b11
                );
                case TOKEN_ID           : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_TOKEN_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_TOKEN_ID)
                );
                case OPERATION_TYPE     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_OPERATION_TYPE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_OPERATION_TYPE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case CREATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_CREATED_AT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_CREATED_AT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case EXPIRATION_DATE    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_EXPIRATION_DATE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_EXPIRATION_DATE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case CONFIRMATION_TOKEN : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CONFIRMATION_TOKEN);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CONFIRMATION_TOKEN);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case UID                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_UID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_UID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_UID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_UID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CLAIMED) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CLAIMED) & 0b11
                );
                case "token_id"           : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_TOKEN_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_TOKEN_ID)
                );
                case "operation_type"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_OPERATION_TYPE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_OPERATION_TYPE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                case "created_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_CREATED_AT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_CREATED_AT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case "expiration_date"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_EXPIRATION_DATE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_EXPIRATION_DATE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case "confirmation_token" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CONFIRMATION_TOKEN);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CONFIRMATION_TOKEN);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "uid"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_UID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_UID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_UID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_UID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<ConfirmationTokens> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<ConfirmationTokens> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<ConfirmationTokens> colId, final int value) {
        if ("operation_type".equals(colId.getColumnId())) {
            {
                final int operand = value;
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_OPERATION_TYPE);
                    if (endPos < 0) return 1;
                    else return Integer.compare(
                        buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<ConfirmationTokens> colId, final long value) {
        if ("token_id".equals(colId.getColumnId())) {
            {
                final long operand = value;
                return ref -> Long.compare(
                    bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_TOKEN_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<ConfirmationTokens> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<ConfirmationTokens> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<ConfirmationTokens> colId, final boolean value) {
        if ("claimed".equals(colId.getColumnId())) {
            return value
                ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b1, 0b1)
                : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b1, 0);
            
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<ConfirmationTokens> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<ConfirmationTokens> colId, final Object value) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CREATED_AT         : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_CREATED_AT);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case EXPIRATION_DATE    : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_EXPIRATION_DATE);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case CONFIRMATION_TOKEN : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case UID                : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_UID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_UID),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "created_at"         : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_CREATED_AT);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case "expiration_date"    : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_EXPIRATION_DATE);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case "confirmation_token" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CONFIRMATION_TOKEN),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "uid"                : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_UID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_UID),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<ConfirmationTokens> colId) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) == 0 ? 0 : -1;
                case TOKEN_ID           : return ALWAYS_LESS;
                case OPERATION_TYPE     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_OPERATION_TYPE) < 0 ? 0 : -1;
                };
                case CREATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_CREATED_AT) < 0 ? 0 : -1;
                };
                case EXPIRATION_DATE    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_EXPIRATION_DATE) < 0 ? 0 : -1;
                };
                case CONFIRMATION_TOKEN : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) < 0 ? 0 : -1;
                case UID                : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_UID) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CLAIMED) & 0b10) == 0 ? 0 : -1;
                case "token_id"           : return ALWAYS_LESS;
                case "operation_type"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_OPERATION_TYPE) < 0 ? 0 : -1;
                };
                case "created_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_CREATED_AT) < 0 ? 0 : -1;
                };
                case "expiration_date"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_EXPIRATION_DATE) < 0 ? 0 : -1;
                };
                case "confirmation_token" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CONFIRMATION_TOKEN) < 0 ? 0 : -1;
                case "uid"                : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_UID) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<ConfirmationTokens> colId, final EntityStorePredicate predicate) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case TOKEN_ID           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_TOKEN_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case OPERATION_TYPE     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case CREATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case EXPIRATION_DATE    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case CONFIRMATION_TOKEN : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case UID                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_UID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "token_id"           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_TOKEN_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case "operation_type"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case "created_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case "expiration_date"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case "confirmation_token" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case "uid"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_UID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<ConfirmationTokens> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case TOKEN_ID           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_TOKEN_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case OPERATION_TYPE     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case CREATED_AT         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case EXPIRATION_DATE    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case CONFIRMATION_TOKEN : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case UID                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_UID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "token_id"           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_TOKEN_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case "operation_type"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case "created_at"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATED_AT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case "expiration_date"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case "confirmation_token" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case "uid"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_UID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<ConfirmationTokens> colId, final EntityStoreComparator comparator) {
        if (colId instanceof ConfirmationTokens.Identifier) {
            final ConfirmationTokens.Identifier _id = (ConfirmationTokens.Identifier) colId;
            switch (_id) {
                case CLAIMED            : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case TOKEN_ID           : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_TOKEN_ID;
                    final int bBegins = bRowOffset + FIELD_TOKEN_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case OPERATION_TYPE     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_OPERATION_TYPE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case CREATED_AT         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CREATED_AT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_CREATED_AT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CREATED_AT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case EXPIRATION_DATE    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_EXPIRATION_DATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case CONFIRMATION_TOKEN : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CONFIRMATION_TOKEN), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case UID                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_UID - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_UID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_UID - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "claimed"            : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "token_id"           : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_TOKEN_ID;
                    final int bBegins = bRowOffset + FIELD_TOKEN_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case "operation_type"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_OPERATION_TYPE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_OPERATION_TYPE)
                    );
                };
                case "created_at"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CREATED_AT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_CREATED_AT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CREATED_AT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_CREATED_AT)
                    );
                };
                case "expiration_date"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_EXPIRATION_DATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_EXPIRATION_DATE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_EXPIRATION_DATE)
                    );
                };
                case "confirmation_token" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CONFIRMATION_TOKEN), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CONFIRMATION_TOKEN - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CONFIRMATION_TOKEN)
                    );
                };
                case "uid"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_UID - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_UID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_UID - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_UID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_UID));
    }
}