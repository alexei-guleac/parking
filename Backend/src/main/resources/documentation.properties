UserController.descripion=Pass article Id and the REST web service method will return an article.
UserController.getArticleById.notes=Pass article Id and the REST web service method will return an article.
ArticleController.getArticleById.id=The values of Id can be 1,2 etc.
ArticleController.getArticleById.id.default=1
AccountController.value=Account controller
AccountController.description=Operations pertaining to user account
AccountController.gRecaptcha.value=Handles Google re-captcha flow
AccountController.gRecaptcha.notes=This method will accept web application user behavior, check it and return a Google captcha validation response.
AccountController.gRecaptcha.gRecaptcha=Pass Google re-captcha user information
AccountController.gRecaptcha.response.500.tokenInvalid=Token is empty or invalid
AccountController.confirmUserAccount.value=Confirm user account in the system.
AccountController.confirmUserAccount.notes=This REST web service method will set user account to ENABLED if passed valid confirmation token.
AccountController.confirmUserAccount.confirmationToken=Pass user account confirmation token.
AccountController.confirmUserAccount.response.500.tokenUsed=Confirmation token is already used. Login or register again
AccountController.confirmUserAccount.response.500.tokenExpired=Confirmation token is expired. Register again
AccountController.confirmUserAccount.response.500.tokenNotFound=Confirmation token not found. Register again
AccountController.forgotUserPassword.value=User forgot password handler
AccountController.forgotUserPassword.notes=Receives the user address and send an reset password email
AccountController.forgotUserPassword.forgotPassRequest=Pass user forgot password information.
AccountController.forgotUserPassword.response.500.resetNotAllowed=Password reset request is allowed only in specified period
AccountController.forgotUserPassword.response.500.userNotFound=User with this email doesn't exists on the server
AccountController.resetUserPassword.value=Endpoint to reset a user's password
AccountController.resetUserPassword.notes=Reset user password based on received confirmation token
AccountController.resetUserPassword.forgotPassRequest=Pass user reset password information.
AccountController.resetUserPassword.response.500.resetNotAllowed=Password change is allowed only in specified period
AccountController.resetUserPassword.response.500.userNotFound=User with this username doesn't exists on the server
AccountController.resetUserPassword.response.500.tokenEmpty=Confirmation token with username empty parameter
AccountController.resetUserPassword.response.500.tokenExpired=Confirmation token is expired. Request again
AccountController.resetUserPassword.response.500.tokenNotFound=Confirmation token not found. Request again
AuthenticationController.value=Authentication controller
AuthenticationController.description=Operations pertaining to user authentication in system
AuthenticationController.authentication.value=User authentication in system
AuthenticationController.authentication.notes=Handles user authentication request from client web application
AuthenticationController.authentication.response.500.userNotFound=User doesn't exists on the server
AuthenticationController.authentication.authenticationRequest=Pass user credentials.
AuthenticationController.socialLogin.value=User authentication in system by social provider id
AuthenticationController.socialLogin.notes=Handles social user authentication request from client web application
AuthenticationController.socialLogin.response.500.userNotFound=User doesn't exists on the server
AuthenticationController.socialLogin.socialAuthRequest=Account associated with this social profile not found
RegistrationController.value=Registration controller
RegistrationController.description=Operations pertaining to user registration in system
RegistrationController.registration.value=User registration in system
RegistrationController.registration.notes=Handles user registration request from client web application
RegistrationController.registration.response.500.usernameExists=Account with this username already exists
RegistrationController.registration.response.500.userExistsNotConfirmed=Account with this email already exists and waiting for confirmation
RegistrationController.registration.response.500.emailExists=Account with this email already exists
RegistrationController.registration.registrationRequest=Pass user registration information.
RegistrationController.socialRegistration.value=User registration in system by social provider information
RegistrationController.socialRegistration.notes=Handles social user registration request from client web application
RegistrationController.socialRegistration.response.500.socialIdExists=Account with this social id already exists
RegistrationController.socialRegistration.response.500.userExistsNotConfirmed=Social account with this email already exists and waiting for confirmation
RegistrationController.socialRegistration.response.500.emailExists=Social account with this email already exists
RegistrationController.socialRegistration.socialRegisterRequest=Pass user social registration information.
SocialController.value=Social controller
SocialController.description=Operations pertaining to social providers connection
SocialController.githubOAuth.value=Method complements OAuth 2.0 flow with Github
SocialController.githubOAuth.notes=GitHub redirects back to site with a temporary code in a code parameter as well as the state you provided in the previous step in a state parameter. The temporary code will expire after 10 minutes. This code needed for exchange to access token which is needed for app access the Github API
SocialController.githubOAuth.response.500.codeNotProvided=Code not provided
SocialController.githubOAuth.githubOAuthCode=Pass GitHub OAuth 2 code to receive API access token to get user information.
SocialController.socialConnect.value=Connect social provider to user account
SocialController.socialConnect.notes=Handles user social connection request from client web application
SocialController.socialConnect.response.500.emailExistsNotConfirmed=Social account with this email already exists and waiting for confirmation
SocialController.socialConnect.response.500.emailExists=Social account with this email already exists
SocialController.socialConnect.response.500.error=Something went wrong during social connection. Contact support
SocialController.socialConnect.response.500.socialIdOccupied=Another account is associated with this social profile
SocialController.socialConnect.response.500.userNotFound=User doesn't exists on the server
SocialController.socialConnect.socialConnectRequest=Pass user and social provider information
SocialController.socialDisconnect.value=Disconnect social provider from user account
SocialController.socialDisconnect.notes=Handles user social disconnection request from client web application
SocialController.socialDisconnect.response.500.userNotFound=User doesn't exists on the server
SocialController.socialDisconnect.socialDisconnectRequest=Pass user and social provider information
UserController.value=User controller
UserController.description=Operations pertaining to User entity in database
UserController.getUserByUsername.value=Get an employee by username
UserController.getUserByUsername.notes=Endpoint to retrieve user profile from database
UserController.getUserByUsername.username=Pass username to get user information
UserController.updateUser.value=Update user
UserController.updateUser.notes=Endpoint to update user profile in database
SocialController.updateUser.response.500.userNotFound=User doesn't exists on the server
UserController.updateUser.updateUserRequest=Pass user information for update
UserController.deleteUser.value=Delete user
UserController.deleteUser.notes=Endpoint to delete user profile from database
SocialController.deleteUser.response.500.userNotFound=User doesn't exists on the server
UserController.deleteUser.username=Pass username to delete user
UserController.getAllUsers.value=View a list of available employees
UserController.getAllUsers.notes=Endpoint to retrieve all users from database
ParkingLotController.value=Parking lot controller
ParkingLotController.description=Operations pertaining to parking lot in database or Java memory
ParkingLotController.getAllParkingLots.value=Get all parking lots
ParkingLotController.getAllParkingLots.notes=Returns all parking lots from parking lots storage
ParkingLotController.getParkingLotById.value=Get parking lot by id
ParkingLotController.getParkingLotById.notes=Returns parking lot from storage by given id
ParkingLotController.getParkingLotById.404.notFound=Parking Lot not found for this id :: target id
ParkingLotController.getParkingLotById.parkingLotId=Pass parking lot id
ParkingLotController.reservation.value=Used to reserve parking lot
ParkingLotController.reservation.notes=Sets status of parking lot to reserved
ParkingLotController.reservation.parkingLotId=Pass parking lot id
ParkingLotController.cancelReservation.value=Used to unreserve parking lot
ParkingLotController.cancelReservation.notes=Sets status of parking lot to unreserved
ParkingLotController.cancelReservation.parkingLotId=Pass parking lot id
StatisticsController.value=Statistics controller
StatisticsController.description=Operations pertaining to parking lot usage statistics in database
StatisticsController.getAllStatistics.value=Get all statistics records from database
StatisticsController.getAllStatistics.notes=Returns all statistics records from storage
StatisticsController.getStatisticsByLotNumber.value=Get all statistics records by parking lot number from database
StatisticsController.getStatisticsByLotNumber.notes=Returns all statistics records by parking lot number from storage
StatisticsController.getStatisticsByLotNumber.lotNumber=Pass parking lot number
ServerResponse.200.common=Success|OK
ServerResponse.401.common=Unauthorized
ServerResponse.403.common=Forbidden
ServerResponse.500.common=Server error
